
import math
import numpy as np
from enum import Enum
from gym.envs.energy.data.dataSet import DataSet

class EnergyComponent():
    """
    Author: Javier Gil-Quijano (javier.gil-quijano@cea.fr)
    Date : January 2019
    Base class defining the common parameters to all energy components (Storage, Generators and Consummers) :
    The EnergyComponent has 4 main attributes:
    -- the clock, reference to the global clock, 
    -- the history, DataSet where the last energy (generated or consummed) values are stored, 
    -- the energyModel (optional), instance of one of the classes that inherits of EnergyComponenetModel it is used to update the current value of the consummed or generated energy, of the EnergyComponent
    -- the forecastEnergyModel (optional), instance of one of the classes that inherits of EnergyComponenetModel it is used to predict the future value of the,consummed or generated energy of the EnergyComponent
    """
    def __init__(self, memoryCapacity, clock, energyModel=None, forecastEnergyModel = None):
        """
        Creates a new instance of EnergyComponent with a history with a capacity of memoryCapacity, and the given clock and energyModel
        Parameters:
        -- clock, reference to the global clock, 
        -- maxCapacity capacity of the history DataSet, 
        -- energyModel (optional), if is not None, it must be an instance of one of the classes that inherits of EnergyComponenetModel 
        """
        self.clock= clock;
        self.history = DataSet(memoryCapacity, clock); 
        self.energyModel = energyModel;
        self.forecastEnergyModel = None;
    
    def setCurrentEnergy(self, energy):
        """
        Adds the history the given quantity of energy
        Parameters:
        -- energy, real value, 
        """
        self.history.addData(energy);

    def getCurrentEnergy(self):
        """
        Returns the last energy contained in the history 
        Parameters:
        -- energy, real value, 
        """
        return self.history.getLastData();

    def getEnergyForDay(self, step):
        """
        returns an numpy.array of real values, containing the energy (generated or consummed, depending on the type of EnergyComponent) for the current day, it is the data going from midnight to the current hour
        """
        return self.history.getDataForDay();

    def reset(self):
        """
        resets the history
        """
        self.history.reset();

    def update(self):
        """
        If the self.energyModel is not None, it updates the current value of energy (setCurrentEnergy) to the value returned byt getEnergyAt method of the self.energyModel
        """
        if self.energyModel != None:
            self.setCurrentEnergy(self.energyModel.getEnergyAt(self.clock.getCurrentTimeStep()));

    def forecastEnergyAt(self, step):
        """
        If the self.energyModel is not None, it updates the current value of energy (setCurrentEnergy) to the value returned byt getEnergyAt method of the self.energyModel
        """
        if self.forecastEnergyModel != None:
            return self.energyModel.getEnergyAt(step);

class EnergyComponentModel:
    """
    Author: Javier Gil-Quijano (javier.gil-quijano@cea.fr)
    Date : January 2019
    Base class defining the main methods of an EnergyModel. An energy model is a class that allows computing the energy (generated or cosummed) by a given EnergyComponent
    The EnergyComponentModel is an abstract class. All inheriting classes must implement the getEnergyAt method
    """
    def __init__(self, clock):
        self.clock = clock;

    def getEnergyAt(self, step):
        """
        This method should return the energy consummed or generated by the represented EnergyComponent at the give time step.
        """
        pass;